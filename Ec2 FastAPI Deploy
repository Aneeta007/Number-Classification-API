import json
import math
import requests

def is_prime(n):
    """Check if a number is prime"""
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def is_perfect(n):
    """Check if a number is a perfect number"""
    return n > 1 and sum(i for i in range(1, n) if n % i == 0) == n

def is_armstrong(n):
    """Check if a number is an Armstrong number"""
    digits = [int(d) for d in str(abs(n))]  # Convert to absolute value to handle negatives
    power = len(digits)
    return sum(d ** power for d in digits) == abs(n)

def get_fun_fact(number):
    """Fetch a fun fact from Numbers API"""
    try:
        response = requests.get(f"http://numbersapi.com/{number}/math?json=true", timeout=2)
        if response.ok:
            return response.json().get("text", "No fun fact available.")
    except requests.RequestException:
        pass
    return "No fun fact available."

def lambda_handler(event, context):
    try:
        # Get query parameters
        query_params = event.get("queryStringParameters", {}) or {}
        number_str = query_params.get("number")

        if not number_str:
            return {
                "statusCode": 400,
                "headers": {
                    "Content-Type": "application/json",
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Methods": "GET",
                    "Access-Control-Allow-Headers": "Content-Type"
                },
                "body": json.dumps({"number": None, "error": True})
            }

        # Convert number and validate
        try:
            number = float(number_str)  # Support floating-point numbers
            if number.is_integer():
                number = int(number)  # Convert safely to integer if applicable
        except ValueError:
            return {
                "statusCode": 400,
                "headers": {
                    "Content-Type": "application/json",
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Methods": "GET",
                    "Access-Control-Allow-Headers": "Content-Type"
                },
                "body": json.dumps({"number": number_str, "error": True})
            }

        # Determine properties
        properties = ["odd" if number % 2 else "even"]
        if is_armstrong(number):
            properties.insert(0, "armstrong")

        response_body = {
            "number": number,
            "is_prime": is_prime(number) if isinstance(number, int) else False,  # Prime check only for integers
            "is_perfect": is_perfect(number) if isinstance(number, int) else False,  # Perfect numbers apply to integers
            "properties": properties,
            "digit_sum": sum(int(d) for d in str(abs(int(number)))),  # Handle negative numbers correctly
            "fun_fact": get_fun_fact(number)
        }

        return {
            "statusCode": 200,
            "headers": {
                "Content-Type": "application/json",
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Methods": "GET",
                "Access-Control-Allow-Headers": "Content-Type"
            },
            "body": json.dumps(response_body)
        }

    except Exception as e:
        return {
            "statusCode": 500,
            "headers": {
                "Content-Type": "application/json",
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Methods": "GET",
                "Access-Control-Allow-Headers": "Content-Type"
            },
            "body": json.dumps({"error": True, "message": f"Internal server error: {str(e)}"})
        }
